{"ast":null,"code":"var _jsxFileName = \"/home/tobit/private-codes/bank-demo/src/components/Login.js\";\nimport React, { useContext, useState } from 'react';\nimport { translated } from '../contexts/translated';\nimport { useForm } from 'react-hook-form';\nimport styled from 'styled-components';\nimport { users } from '../userData';\nimport { AuthContext } from '../contexts/AuthContext';\nimport { UserContext } from '../contexts/UserContext'; //Material UI Imports\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle'; //Styled Components\n\nconst ErrorMsg = styled.p`\ncolor:red;\nfont-size:.8rem;\n`;\n\nconst Login = ({\n  language,\n  loginState,\n  loginClose\n}) => {\n  const [loginFailed, setLoginFailed] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    mode: 'onChange',\n    reValidateMode: 'onChange'\n  });\n  const {\n    setAuth\n  } = useContext(AuthContext);\n  const {\n    setUser\n  } = useContext(UserContext);\n\n  const onSubmit = data => {\n    const activeUser = users.find(user => user.username === data.username && user.password === data.password);\n\n    if (!activeUser) {\n      setLoginFailed(true);\n    } else if (activeUser) {\n      setUser(activeUser);\n      setAuth(true);\n      setLoginFailed(false);\n      loginClose();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Dialog, {\n    open: loginState,\n    onClose: loginClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, translated.loginHeader[language]), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DialogContentText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, translated.loginMsg[language]), /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"username\",\n    inputRef: register({\n      required: \"You must specify a username.\",\n      minLength: {\n        value: 2,\n        message: 'Username must have at least 6 characters.'\n      }\n    }),\n    name: \"username\",\n    label: translated.loginUser[language],\n    type: \"text\",\n    error: !!errors.name,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    margin: \"dense\",\n    id: \"password\",\n    inputRef: register({\n      required: \"You must specify a password.\",\n      minLength: {\n        value: 2,\n        message: 'Password must have at least 6 characters.'\n      }\n    }),\n    label: translated.loginPassword[language],\n    type: \"password\",\n    name: \"password\",\n    error: !!errors.validName,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }), loginFailed && /*#__PURE__*/React.createElement(ErrorMsg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 37\n    }\n  }, \"The username or password you entered is incorrect.\")), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: loginClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, translated.loginCancel[language]), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, translated.loginSubmit[language]))));\n};\n\nexport default Login;","map":{"version":3,"sources":["/home/tobit/private-codes/bank-demo/src/components/Login.js"],"names":["React","useContext","useState","translated","useForm","styled","users","AuthContext","UserContext","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ErrorMsg","p","Login","language","loginState","loginClose","loginFailed","setLoginFailed","register","handleSubmit","errors","mode","reValidateMode","setAuth","setUser","onSubmit","data","activeUser","find","user","username","password","loginHeader","loginMsg","required","minLength","value","message","loginUser","name","loginPassword","validName","loginCancel","loginSubmit"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport { translated } from '../contexts/translated'\nimport { useForm } from 'react-hook-form'\nimport styled from 'styled-components'\nimport { users } from '../userData'\nimport { AuthContext } from '../contexts/AuthContext'\nimport { UserContext } from '../contexts/UserContext'\n\n//Material UI Imports\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n//Styled Components\nconst ErrorMsg = styled.p`\ncolor:red;\nfont-size:.8rem;\n`\n\nconst Login = ({ language, loginState, loginClose }) => {\n    const [loginFailed, setLoginFailed] = useState(false)\n\n    const { register, handleSubmit, errors } = useForm({\n        mode: 'onChange',\n        reValidateMode: 'onChange'\n    })\n\n    const { setAuth } = useContext(AuthContext)\n    const { setUser } = useContext(UserContext)\n\n    const onSubmit = (data) => {\n        const activeUser = users.find(user => user.username === data.username && user.password === data.password);\n\n        if (!activeUser) {\n            setLoginFailed(true)\n        } else if (activeUser) {\n            setUser(activeUser)\n            setAuth(true)\n            setLoginFailed(false)\n            loginClose()\n        }\n    }\n\n    return (\n        <Dialog open={loginState} onClose={loginClose} aria-labelledby=\"form-dialog-title\" >\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <DialogTitle id=\"form-dialog\">{translated.loginHeader[language]}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {translated.loginMsg[language]}\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"username\"\n                        inputRef={register({ required: \"You must specify a username.\", minLength: { value: 2, message: 'Username must have at least 6 characters.' } })}\n                        name='username'\n                        label={translated.loginUser[language]}\n                        type=\"text\"\n                        error={!!errors.name}\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"password\"\n                        inputRef={register({ required: \"You must specify a password.\", minLength: { value: 2, message: 'Password must have at least 6 characters.' } })}\n                        label={translated.loginPassword[language]}\n                        type=\"password\"\n                        name='password'\n                        error={!!errors.validName}\n                        fullWidth\n                    />\n                    {loginFailed && <ErrorMsg>The username or password you entered is incorrect.</ErrorMsg>}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={loginClose} color=\"primary\">\n                        {translated.loginCancel[language]}\n                    </Button>\n                    <Button type='submit' color=\"primary\">\n                        {translated.loginSubmit[language]}\n                    </Button>\n                </DialogActions>\n            </form>\n        </Dialog>\n    );\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}